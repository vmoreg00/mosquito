Settings:
  Output files: "/data/victor/mosquito/data/refgenome/CulQui_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data/victor/mosquito/data/refgenome/CulQui.fna
Reading reference sizes
  Time reading reference sizes: 00:00:07
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
bmax according to bmaxDivN setting: 134989843
Using parameters --bmax 101242383 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 101242383 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:14
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:04
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:06
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 7.71371e+07 (target: 101242382)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
Getting block 2 of 7
  Reserving size (101242383) for bucket 1
  Reserving size (101242383) for bucket 2
Getting block 5 of 7
  Reserving size (101242383) for bucket 5
Getting block 6 of 7
Getting block 4 of 7
  Reserving size (101242383) for bucket 6
  Calculating Z arrays for bucket 5
  Reserving size (101242383) for bucket 4
  Calculating Z arrays for bucket 1
Getting block 7 of 7
  Calculating Z arrays for bucket 2
  Reserving size (101242383) for bucket 7
  Entering block accumulator loop for bucket 1:
  Entering block accumulator loop for bucket 5:
Getting block 3 of 7
  Calculating Z arrays for bucket 4
  Reserving size (101242383) for bucket 3
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 7:
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 1: 10%
  bucket 5: 10%
  bucket 1: 20%
  bucket 7: 10%
  bucket 6: 10%
  bucket 5: 20%
  bucket 1: 30%
  bucket 7: 20%
  bucket 1: 40%
  bucket 2: 10%
  bucket 5: 30%
  bucket 6: 20%
  bucket 1: 50%
  bucket 4: 10%
  bucket 5: 40%
  bucket 7: 30%
  bucket 1: 60%
  bucket 3: 10%
  bucket 1: 70%
  bucket 6: 30%
  bucket 5: 50%
  bucket 2: 20%
  bucket 7: 40%
  bucket 1: 80%
  bucket 5: 60%
  bucket 6: 40%
  bucket 1: 90%
  bucket 4: 20%
  bucket 1: 100%
  Sorting block of length 93948861 for bucket 1
  (Using difference cover)
  bucket 7: 50%
  bucket 5: 70%
  bucket 6: 50%
  bucket 3: 20%
  bucket 2: 30%
  bucket 5: 80%
  bucket 7: 60%
  bucket 5: 90%
  bucket 6: 60%
  bucket 7: 70%
  bucket 5: 100%
  Sorting block of length 100919106 for bucket 5
  (Using difference cover)
  bucket 4: 30%
  bucket 7: 80%
  bucket 6: 70%
  bucket 2: 40%
  bucket 7: 90%
  bucket 6: 80%
  bucket 3: 30%
  bucket 4: 40%
  bucket 7: 100%
  Sorting block of length 98309898 for bucket 7
  (Using difference cover)
  bucket 6: 90%
  bucket 2: 50%
  bucket 6: 100%
  Sorting block of length 10685312 for bucket 6
  (Using difference cover)
  bucket 3: 40%
  bucket 4: 50%
  bucket 2: 60%
  bucket 4: 60%
  bucket 3: 50%
  bucket 2: 70%
  bucket 4: 70%
  bucket 2: 80%
  Sorting block time: 00:00:09
Returning block of 10685313 for bucket 6
  bucket 3: 60%
  bucket 4: 80%
  bucket 2: 90%
  bucket 3: 70%
  bucket 4: 90%
  bucket 2: 100%
  Sorting block of length 55958317 for bucket 2
  (Using difference cover)
  bucket 3: 80%
  bucket 4: 100%
  Sorting block of length 79283577 for bucket 4
  (Using difference cover)
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 100854297 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:51
Returning block of 55958318 for bucket 2
  Sorting block time: 00:01:28
Returning block of 93948862 for bucket 1
  Sorting block time: 00:01:37
Returning block of 98309899 for bucket 7
  Sorting block time: 00:01:17
Returning block of 79283578 for bucket 4
  Sorting block time: 00:01:41
Returning block of 100919107 for bucket 5
  Sorting block time: 00:01:32
Returning block of 100854298 for bucket 3
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 168990362
fchr[G]: 270000367
fchr[T]: 371038995
fchr[$]: 539959374
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 185125384 bytes to primary EBWT file: /data/victor/mosquito/data/refgenome/CulQui_index.1.bt2
Wrote 134989848 bytes to secondary EBWT file: /data/victor/mosquito/data/refgenome/CulQui_index.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 539959374
    bwtLen: 539959375
    sz: 134989844
    bwtSz: 134989844
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 33747461
    offsSz: 134989844
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 2812289
    numLines: 2812289
    ebwtTotLen: 179986496
    ebwtTotSz: 179986496
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:05:39
Reading reference sizes
  Time reading reference sizes: 00:00:06
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 134989843
Using parameters --bmax 101242383 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 101242383 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:14
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:05
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:05
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 7.71371e+07 (target: 101242382)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
Getting block 2 of 7
  Reserving size (101242383) for bucket 1
  Reserving size (101242383) for bucket 2
Getting block 4 of 7
Getting block 6 of 7
  Calculating Z arrays for bucket 2
  Reserving size (101242383) for bucket 4
Getting block 5 of 7
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 4
Getting block 3 of 7
  Entering block accumulator loop for bucket 1:
  Reserving size (101242383) for bucket 5
Getting block 7 of 7
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 5
  Reserving size (101242383) for bucket 7
  Reserving size (101242383) for bucket 3
  Reserving size (101242383) for bucket 6
  Entering block accumulator loop for bucket 5:
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 3:
  bucket 1: 10%
  bucket 7: 10%
  bucket 4: 10%
  bucket 2: 10%
  bucket 6: 10%
  bucket 7: 20%
  bucket 1: 20%
  bucket 5: 10%
  bucket 2: 20%
  bucket 4: 20%
  bucket 7: 30%
  bucket 1: 30%
  bucket 2: 30%
  bucket 3: 10%
  bucket 4: 30%
  bucket 6: 20%
  bucket 7: 40%
  bucket 5: 20%
  bucket 1: 40%
  bucket 2: 40%
  bucket 7: 50%
  bucket 1: 50%
  bucket 4: 40%
  bucket 2: 50%
  bucket 6: 30%
  bucket 5: 30%
  bucket 7: 60%
  bucket 1: 60%
  bucket 2: 60%
  bucket 4: 50%
  bucket 7: 70%
  bucket 1: 70%
  bucket 3: 20%
  bucket 2: 70%
  bucket 4: 60%
  bucket 5: 40%
  bucket 1: 80%
  bucket 6: 40%
  bucket 7: 80%
  bucket 4: 70%
  bucket 2: 80%
  bucket 1: 90%
  bucket 4: 80%
  bucket 2: 90%
  bucket 5: 50%
  bucket 1: 100%
  Sorting block of length 90214728 for bucket 1
  (Using difference cover)
  bucket 7: 90%
  bucket 4: 90%
  bucket 6: 50%
  bucket 4: 100%
  Sorting block of length 93801269 for bucket 4
  (Using difference cover)
  bucket 3: 30%
  bucket 2: 100%
  Sorting block of length 24069724 for bucket 2
  (Using difference cover)
  bucket 7: 100%
  Sorting block of length 99354928 for bucket 7
  (Using difference cover)
  bucket 5: 60%
  bucket 6: 60%
  bucket 3: 40%
  bucket 6: 70%
  bucket 5: 70%
  bucket 3: 50%
  bucket 6: 80%
  bucket 5: 80%
  bucket 6: 90%
  bucket 3: 60%
  bucket 5: 90%
  bucket 6: 100%
  Sorting block of length 35898407 for bucket 6
  (Using difference cover)
  bucket 5: 100%
  Sorting block of length 98535625 for bucket 5
  (Using difference cover)
  bucket 3: 70%
  bucket 3: 80%
  Sorting block time: 00:00:20
Returning block of 24069725 for bucket 2
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 98084687 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:32
Returning block of 35898408 for bucket 6
  Sorting block time: 00:01:24
Returning block of 90214729 for bucket 1
  Sorting block time: 00:01:35
Returning block of 93801270 for bucket 4
  Sorting block time: 00:01:38
Returning block of 99354929 for bucket 7
  Sorting block time: 00:01:38
Returning block of 98535626 for bucket 5
  Sorting block time: 00:01:36
Returning block of 98084688 for bucket 3
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 168990362
fchr[G]: 270000367
fchr[T]: 371038995
fchr[$]: 539959374
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 185125384 bytes to primary EBWT file: /data/victor/mosquito/data/refgenome/CulQui_index.rev.1.bt2
Wrote 134989848 bytes to secondary EBWT file: /data/victor/mosquito/data/refgenome/CulQui_index.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 539959374
    bwtLen: 539959375
    sz: 134989844
    bwtSz: 134989844
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 33747461
    offsSz: 134989844
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 2812289
    numLines: 2812289
    ebwtTotLen: 179986496
    ebwtTotSz: 179986496
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:04:34
